/**
 * Created by Andrew Tanchenko on 15.05.2017.
 */
import java.util.*;

public class PhoneKey {

    public int phNum;

    private static final char[][] PHONE_CHAR_MAP = {
            {'0'},
            {'1'           },{'A', 'B', 'C'}, {'D', 'E', 'F'},
            {'G', 'H', 'I'}, {'J', 'K', 'L'}, {'M', 'N', 'O'},
            {'P', 'Q', 'R', 'S'}, {'T', 'U', 'V'}, {'W', 'X', 'Y','Z'}};

    public static char getCharKey(int phoneKey, int place) {
        char ch = '-';
        try {
            ch = PHONE_CHAR_MAP[phoneKey][place - 1];
        } catch (IndexOutOfBoundsException e) {
            System.out.println(">>> Index is out of range");
        }
        return ch;
    }

    public static int getCharLength(int key){
        return PHONE_CHAR_MAP[key].length;
    }

    public static int[] getDigits (int number) {
        String st =""+number;
        int[] numb = new int[st.length()];
        for(int i=st.length()-1;i>=0;i--){
            numb[i]=number%10;
            number=number/10;
        }
        return numb;
    }

    public static int getNumCombin(int number){
        int combin=1;
        int[] numb = getDigits(number);
        for(int i=0; i<numb.length;i++){
            combin*=getCharLength(numb[i]);
        }
        return combin;
    }

    public static int getDigitsCount(int number){
        return getDigits(number).length;
    }

    private static int[][] getNumMask(int number){
        int numCombin = getNumCombin(number);
        int digits = getDigitsCount(number);
        int[][] numMask = new int[numCombin][digits];

        int[] digit = getDigits(number);
        int pos;
        String num="";
        int nRepeat;

        for(int i=0; i<digits;i++){
            num+=digit[i];
            nRepeat=getNumCombin(Integer.parseInt(num))/getNumCombin(digit[i]);

            int j=0;
            pos=1;
            while (j<numCombin){
                for(int k=1;k<=nRepeat;k++){
                    numMask[j][i]=pos;
                    j++;
                }
                pos++;
                if(pos>getCharLength(digit[i])) pos=1;
            }
        }
        return numMask;
    }

    private static void printMask(int number){
        int[][] mask = getNumMask(number);
        for(int i=0;i<mask.length;i++){
            System.out.println(Arrays.toString(mask[i]));
        }
    }

    //public static char[][] getCombinations(int number){
    public static HashSet getCombinations(int number){
        HashSet<String> combin = new HashSet<String>(getNumCombin(number));
        //char allComb[][] = new char[getNumCombin(number)][getDigitsCount(number)];
        int[][] mask = getNumMask(number);
        int[] digit = getDigits(number);

        String s = "";
        for(int j=0;j<getNumCombin(number);j++){
            for(int i=0; i<getDigitsCount(number);i++){
                s=s+getCharKey(digit[i],mask[j][i]);
                //allComb[j][i]=getCharKey(digit[i],mask[j][i]);
            }
            combin.add(s);
            s="";
        }
        return combin;
    }

    private static void printAllCombinations(int number){
        HashSet<String> combin = getCombinations(number);
        System.out.println(">>> All possible combinations for "+number+" are shown below");
        for(String comb: combin) System.out.println(comb);
    }

////////////////////////////////////////////////////////////////
    public static void main(String[] args){
        int num = 3096;
        System.out.println(getCharKey(2,3));

        System.out.println(">>> Number of combinations for "+num+": "+getNumCombin(num));
        printAllCombinations(num);

        //printMask(num);
        //System.out.println(getCombinations(3096));

    }
    
}
